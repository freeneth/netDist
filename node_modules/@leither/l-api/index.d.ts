/**
 * @version 3
 * @changelog 180717 herbluo update to version 2
 * @changelog 180717 args of register
 */
export type Sid = string;
export type Gid = string;
export type Bid = string;
export type Uid = string;
export type Timeout = any;
export type FileId = string;
export type UnKnowType = any;

declare interface Window {
    DATA_ID: string
}

interface LApi {
    begin: (bid: Bid, timeout: any) => Promise<any>;
    commit: Function;
    rollback: Function;
    set: Function;
    setData: Function;
    get: Function;
    del: Function;
    incr: Function;

    accept: Function;
    act: Function;
    checkFile: (sid: Sid, id: FileId) => Promise<any>;
    checkRight: (sid: Sid, bid: Bid, key: any, field: any) => Promise<any>;
    closeTunnel: (sid: Sid, serverUrl: any) => Promise<any>;
    createInvCode: Function;
    deleteFile: (sid: Sid, id: FileId) => Promise<any>;
    deleteInvCode: Function;
    exit: Function;
    expire: Function;
    getAppDownloadKey: Function;
    getGShortUrlKey: Function;
    getInvCodeInfo: Function;
    getInvTemplate: Function;
    getLFileData: (sid: Sid, id: FileId, start: number, count: number) => Promise<any>;
    getLShortUrlKey: Function;
    getResByName: Function;
    getTempFileMac: (sid: Sid, timpId: string) => Promise<any>;
    getUserInfo: Function;
    getVar: Function;
    getVarByContext: Function;
    grant: (sid: Sid, key: any, field: any, toId: any, right: any) => Promise<any>;
    hDel: Function;
    hGet: (sid: Sid, uid: Uid, tableName: string, key: string) =>
        Promise<string>; // 当uid为 DATA_ID 时，获取公共数据
    hGetAll: Function;
    hKeys: Function;
    hLen: Function;
    hMClear: Function;
    hMGet: Function;
    hMSet: Function;
    hRevScan: Function;
    hScan: Function;
    hSet: (sid: Sid, uid: Uid, tableName: string, key: string, value: string) =>
        Promise<number>; // > 0代表成功,约定 uid为DATA_ID时数据为公共数据
    invite: Function;
    lClear: Function;
    lExpire: Function;
    lExpireAt: Function;
    lIndex: Function;
    lLen: Function;
    login: (username: string, password: string, type: 'byname')
        => Promise<{ sid: Sid, user: any & {id: Uid}, swarm: UnKnowType }>;
    lPersist: Function;
    lPop: Function;
    lPush: Function;
    lRange: (sid: Sid, uid: Uid, tableName: string, start: number, end: number)
        => Promise<string[]>;
    lSet: Function;
    lTtl: Function;
    openTempFile: (sid: Sid) => Promise<any>;
    openTunnel: (sid: Sid, serverUrl: any, uuid: any, targetURL: any) => Promise<any>;
    proxyGet: Function;
    proxyPost: Function;
    pullMsg: Function;
    readMsg: Function;
    register: (name_pass_jsonStrOrUsername: string, password?: string) => Promise<any>;
    restart: Function;
    rPop: Function;
    rPush: (sid: Sid, uid: Uid, tableName: string, ...list: string[])
        => Promise<number>;
    run: (bid: Bid, id: string, ...info: string[]) => Promise<any>,
    runScript: (script: string, map: object) => Promise<any>;
    registerScript: (sid: string, script: String, info: object) => Promise<string>;
    runByScriptID: (sid: string, id: string, info: object) => Promise<any>;
    taskRunInBackground: (sid: string, setting: any) => Promise<any>;
    sAdd: Function;
    scan: Function;
    sCard: Function;
    sClear: Function;
    sDiff: Function;
    sendmail: Function;
    sendMsg: Function;
    setHostIp: Function;
    setInvTemplate: Function;
    setLFileData: (sid: Sid, tempId: string, start: number, data: any)
        => Promise<any>;
    setUserInfo: Function;
    sInter: Function;
    sMClear: Function;
    sMembers: Function;
    sRem: Function;
    sUnion: Function;
    temp2LFile: (sid: Sid, tempId: string) => Promise<any>;
    test: Function;
    updateInvCode: Function;
    ugVerifyCode: (sid: Sid, gid: Gid, timeout: Timeout) => Promise<any>;
    userGroupAddManager: (sid: Sid, gid: Gid, addId: any) => Promise<any>;
    userGroupAddMember: (sid: Sid, gid: Gid, addId: any) => Promise<any>;
    userGroupCreate: (sid: Sid, name: any) => Promise<any>;
    userGroupDelManager: (sid: Sid, gid: Gid, delid: any) => Promise<any>;
    userGroupDelMember: (sid: Sid, gid: Gid, delid: any) => Promise<any>;
    userGroupDestroy: (sid: Sid, gid: Gid) => Promise<any>;
    userGroupGetInfo: (sid: Sid, gid: Gid, k: any) => Promise<any>;
    userGroupJoin: (sid: Sid, gid: Gid, verify: any) => Promise<any>;
    userGroupSetInfo: (sid: Sid, gid: Gid, k: any, v: any) => Promise<any>;
    veni: Function;
    zAdd: Function;
    zCard: Function;
    zCount: Function;
    zRange: Function;
    zRangeByScore: Function;
    zRank: Function;
    zRem: Function;
    zScore: Function;
    hIncrBy: Function;
    removeUser: Function;
    logout: Function;
    strLen: Function;
    zRemRangeByScore: Function;
    zMClear: Function;
    zClear: Function;
    setDomain: Function;
    showDomain: Function;
    delDomain: Function;
}

// global 请传入 window
export declare function initLAPI (
    apiPath: string,
    useWs?: boolean
): LApi;
